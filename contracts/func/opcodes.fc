;; ----  Job contract states  --------------------------------------------------

const int state::unlocked        = 0;
const int state::locked_on_offer = 1;
const int state::locked_working  = 2;

;; ----  Offer contract opcodes  -----------------------------------------------

const int op::destruct        = 0x64737472;
const int op::payment_request = 0x706c7567;
const int op::excesses        = 0xd53276db;
const int op::subscription    = 0x73756273;

;; ----  Job contract opcodes  -------------------------------------------------

const int op::update_job    = 212;        ;; [TODO] 200 + zlib.crc32(b'op::update_job') % 100
const int op::lock_on_offer = 216;        ;; 200 + zlib.crc32(b'op::lock_on_offer') % 100
const int op::lock_success  = 217;        ;; 200 + zlib.crc32(b'op::lock_success') % 100
const int op::cancel_job    = 279;        ;; 200 + zlib.crc32(b'op::cancel_job') % 100

;; ----  Errors (common)  ------------------------------------------------------

const int err::invalid_sender = 171;      ;; 100 + zlib.crc32(b'err::invalid_sender') % 100
const int err::invariant_failed = 172;    ;; 100 + zlib.crc32(b'err::invariant_failed') % 100
const int err::insufficient_stake = 179;  ;; 100 + zlib.crc32(b'err::insufficient_stake') % 100
const int err::low_job_value = 127;       ;; 100 + zlib.crc32(b'err::low_job_value') % 100

const int TON = 1000 * 1000 * 1000;


;; const slice job_analytic_address = "EQA__Ratelance__at_Hack-a-TONx_by_DoraHacks__NwP"a;
const slice job_analytic_address = "EQA__Ratelance_______________________________CFj"a;
const slice multisig_negotiation = "EQA__Ratelance__MULTISIG_NEGOTIATION_________H1U"a;

slice offer_comment() asm "x{00000000} x{6F66666572} |+ PUSHSLICE";

{-

## Common user story

1. Poster creates an job contract sending his stake (order value + fee + safety deposit) to it.
2. An analytic message is sent by poster to pre-specified address in parallel, for job contracts to be found easier.
-
3. Worker creates an offer contract in response to specified job, stores hash of order.
4. An analytic message is sent by worker to job contract in parallel, for offer contracts to be found easier.
-
5. Poster chooses an offer and sends its address (and proof that it's really an offer == StateInit) to job contract.
6. Job contract calculates hash of current order state and sends a "collapse" request to offer contract.
   Job contract locks.
7. Offer contract checks the incoming message and requests money from worker's wallet, locking meanwhile.
8. Worker's wallet accepts message from plugin and responds with wanted amount of money.
9. Offer contract forwards this money to job contract, destroying itself and unplugging from wallet.
-
10. Job contract transforms into multisig wallet (2/4: poster, worker, Ratelance platform and TON validators)
 - poster+worker           an agreement was established, everything is OK
 - poster+Ratelance        worker has not accomplished the work, poster gets a refund
 - worker+Ratelance        poster does not accept provided work, worker gets the money
 - poster+TON validators   something done by worker is deemed so inacceptible by TON that even voting is conducted
 - worker+TON validators   heavy disagreement between poster and worker, so that Ratelance cannot be an referee
 - Ratelance+TON           order is deemed so inacceptible by TON that even voting is conducted
-
11. Single-party-signed messages go to `multisig_negotiation` address as analytic messages with minimal value.
-
12. Upon receiving message with required signatures, job contract sends out TON and self-destroys.

## Reverts

- 1,2. Poster sends a "job revoke" message, job contract performs a full refund and self-destroys.
- 3,4. Worker revokes a plugin via his wallet, offer contract self-destroys.
- 5,6,7. No way back.
- 8. If worker's wallet responds "not enough funds" (bounce), offer contract unlocks and sends "unlock" to job contract, returning to step 5.
- 9,10. No way back.
- 11. No way to revoke a message once signed. Open another job contract to change conditions.
- 12. No way back. Money is sent in unbounceable mode.

## Possible failures

12. Invalid message signed by parties just won't let the transaction execute.
11. -
10. Insufficient funds for transformation. Taking 0.2 TON (total 0.2).
9.  - Insufficient value to forward. Taking +0.1 TON.
    - Insufficient money to unplug.  Taking +0.2 TON (total 0.5).
8.  Insufficient value to process message. Taking +0.2 TON (total 0.7).
7.  Insufficient money to lock the contract. Taking +0.1 TON (total 0.8).
6.  Insufficient funds to lock the contract. Taking +0.2 TON (total 1.0).
5.  -
4.  -
3.  -
2.  -
1.  -

-}
