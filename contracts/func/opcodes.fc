;; ----  Job contract states  --------------------------------------------------

const int state::unlocked        = 0;
const int state::locked_on_offer = 1;
const int state::locked_working  = 2;

;; ----  Offer contract opcodes  -----------------------------------------------

const int op::destruct        = 0x64737472;
const int op::payment_request = 0x706c7567;
const int op::excesses        = 0xd53276db;
const int op::subscription    = 0x73756273;

;; ----  Job contract opcodes  -------------------------------------------------

const int op::update_job    = 168;        ;; [TODO] 156 + zlib.crc32(b'op::update_job') % 100
const int op::lock_on_offer = 172;        ;; 156 + zlib.crc32(b'op::lock_on_offer') % 100
const int op::collapse      = 177;        ;; 156 + zlib.crc32(b'op::collapse') % 100
const int op::lock_success  = 173;        ;; 156 + zlib.crc32(b'op::lock_success') % 100
const int op::lock_failed   = 212;        ;; 156 + zlib.crc32(b'op::lock_failed') % 100
const int op::cancel_job    = 235;        ;; 156 + zlib.crc32(b'op::cancel_job') % 100
const int op::finish_job    = 187;        ;; 156 + zlib.crc32(b'op::finish_job') % 100

;; ----  Errors (common)  ------------------------------------------------------

const int err::invalid_sender = 171;      ;; 100 + zlib.crc32(b'err::invalid_sender') % 100
const int err::invariant_failed = 172;    ;; 100 + zlib.crc32(b'err::invariant_failed') % 100
const int err::insufficient_stake = 179;  ;; 100 + zlib.crc32(b'err::insufficient_stake') % 100
const int err::low_job_value = 127;       ;; 100 + zlib.crc32(b'err::low_job_value') % 100

const int TON = 1000 * 1000 * 1000;


;; const slice job_analytic_address = "EQA__Ratelance__at_Hack-a-TONx_by_DoraHacks__NwP"a;
const slice job_analytic_address = "EQA__Ratelance_______________________________CFj"a;
const slice multisig_negotiation = "EQA__Ratelance__MULTISIG_NEGOTIATION_________H1U"a;

slice offer_comment() asm "x{00000000} x{6F66666572} |+ PUSHSLICE";

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

{-

## TL-B types

Common user story = CUS.

```
// CUS-1. Poster creates a job contract. Message is empty.
job_unlocked$00 poster:MsgAddressInt value:uint64 desc:^Cell poster_key:uint256
                = JobContractData;

// CUS-2. Analytic message indicating address of newly created job contract.
_ job_contract:MsgAddressInt poster:MsgAddressInt value:uint64 desc:^Cell = Msg;

// CUS-3. Worker deploys an offer contract as plugin.
offer_unlocked$00 job:MsgAddressInt worker:MsgAddressInt stake:uint64 desc:^Cell
                  worker_key:uint256 short_job_hash:uint160 = OfferContractData;
_ sig:uint512 sw:uint32 until:uint32 seqno:uint32 [1]:uint8 [0]:uint8 [0.05]:TON
  state_init:^OfferContractState body_init:^(()) = Msg;

// CUS-4. Analytic message indicating address of newly created offer contract.
_ offer_contract:MsgAddressInt worker:MsgAddressInt val:uint64 desc:^Cell = Msg;

// CUS-5. Poster chooses an offer.
lock_on_offer#AC offer_data_init:^OfferContractData = Msg;

// CUS-6. Job contract locks.
collapse#B1 current_short_hash:uint160 = Msg;
job_locked$01 offer:MsgAddressInt poster:MsgAddressInt value:uint64 desc:^Cell
              poster_key:uint256 = JobContractData;

// CUS-7. Offer contract requests money and locks.
take_stake#706c7567 query_id:uint64 stake:(VarUInteger 16) extra:^(()) = Msg;
offer_locked$01   job:MsgAddressInt worker:MsgAddressInt stake:uint64 desc:^Cell
                  worker_key:uint256 short_job_hash:uint160 = OfferContractData;

// CUS-8-OK. Wallet returns the money.
give_stake#f06c7567 query_id:uint64 = Msg;

// CUS-9-OK. Offer merges into job contract.
lock_success#A3 worker:MsgAddressInt desc:^Cell worker_key:uint256 = Msg;
unplug#64737472 query_id:uint64 = Msg;

// CUS-8-ERR. Insufficient funds on worker's wallet.
refuse_give#ffffffff [706c7567]:uint32 query_id:uint64 ... = Msg;

// CUS-9-ERR. Offer contract unlocks itself and job contract.
// offer_unlocked
lock_failed#D4 = Msg;
// job_unlocked

// CUS-10. Job contract essentially becomes multisig wallet.
job_working$10 poster:MsgAddressInt worker:MsgAddressInt value:uint64
               poster_desc:^Cell worker_desc:^Cell
               keys:^[poster:uint256 worker:uint256 platform:uint256]
               = JobContractData;

// CUS-11. Single-signed messages.
poster_proposal$00 signature:uint512 worker_ton_range:(uint32, uint32) = Msg;
worker_proposal$01 signature:uint512 worker_ton_range:(uint32, uint32) = Msg;
ratelance_proposal$10 signature:uint512 worker_ton_range:(uint32, uint32) = Msg;

// Config parameter ID: zlib.crc32(b'ratelance::decisions') & 0x7FFFFFFF
ton_vals_proposal#_ dec_by_job:(Hashmap MsgAddressInt (uint32,uint32))
                    = ConfigParam 1652841508;

// CUS-12. Finishing work.
finish_job#BB first_sig:^[poster/worker/ratelance_proposal/$11]
              second_sig:^[poster/worker/ratelance_proposal/$11]
              {first_sig::discriminant != second_sig::discriminant} = Msg;

// CUS-1,2-REV. Cancelling job.
cancel_job#EB = Msg;

// CUS-3,4-REV. Cancelling offer.
destruct#64737472 = Msg;
```

-}
