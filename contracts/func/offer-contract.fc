#include "func/stdlib-ext.fc";
#include "func/opcodes.fc";
#include "func/tlb.fc";

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Incoming messages:
;; CUS-3.           worker      [empty]
;; CUS-3,4-REV.     worker      op::destruct
;; CUS-6.           job         op::collapse
;; CUS-8-OK.        worker      op::payment_ok
;; CUS-8-ERR.       worker      0xFFFFFFFF

() recv_internal(cell in_msg, slice in_msg_body) {
  terminate_if(in_msg_body.slice_bits() < 32);
  
  (int bounced, slice sender) = load_bounced_sender(in_msg);
  
  int op = in_msg_body~load_uint(32);
  
  slice own_data = get_data().begin_parse();
  int tag = own_data~load_uint(2);
  
  if (tag == offer::tag::unlocked) {
    (slice job, slice worker, int stake, cell desc, slice worker_key,
      int job_hash) = offer::ld_unlocked(own_data);
    
    if (op == op::destruct) {
      throw_unless(200, equal_slices(worker, sender));
      
      send_text(mode::destroy_into(), sender, 0, "Offer revoked.");
      terminate();
    } elseif (op == op::collapse) {
      throw_unless(200, equal_slices(job, sender));
      throw_unless(200, offer::ld_msg_collapse(in_msg_body) == job_hash);
      
      send_to_rbounceable(mode::forward_value(), true, worker, 0, stake,
                          offer::st_msg_take_stake);
      set_data(begin_cell()
        .store_uint(offer::tag::locked, 2)
        .offer::st_locked(own_data)
        .end_cell());
      terminate();
    }
  } elseif (tag == offer::tag::locked) {
    slice job = own_data~load_msg_addr();
    slice worker = own_data~load_msg_addr();
    
    throw_unless(200, equal_slices(worker, sender));
    
    if (bounced) {
      send_to(mode::forward_value(), job, 0, null(), offer::st_msg_lock_failed);
      set_data(begin_cell()
        .store_uint(offer::tag::unlocked, 2)
        .store_slice(own_data)
        .end_cell());
      terminate();
    } elseif (op == op::payment_ok) {
      own_data~skip_bits(64);
      
      send_to(mode::destroy_into(), job, 0, triple(
        worker,
        own_data.preload_ref(),
        own_data~load_bits(256)
      ), offer::st_msg_lock_success);
      terminate();
    }
  }
  
  throw(0xFFFF);
}
